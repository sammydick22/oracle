from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime

class SearchTweetsParameters(BaseModel):
    query: str = Field(description="The search query to find tweets")
    from_date: Optional[datetime] = Field(default=None, description="Start date for tweet search (UTC)")
    to_date: Optional[datetime] = Field(default=None, description="End date for tweet search (UTC)")
    max_results: Optional[int] = Field(default=100, description="Maximum number of tweets to return")
    credentials_path: Optional[str] = Field(default="twitter_credentials.yaml", description="Path to the YAML file containing Twitter API credentials")
    product: Optional[str] = Field(default="30day", description="Twitter API product to use: '30day' or 'fullarchive'")
    environment: Optional[str] = Field(default="dev", description="Twitter API environment: 'dev' or 'prod'")
    count_bucket: Optional[str] = Field(default="day", description="Bucket size for counts endpoint: 'day', 'hour', or 'minute'")

class GetTrendingHashtagsParameters(BaseModel):
    count: Optional[int] = Field(default=20, description="Number of trending hashtags to return")

def format_date(dt: datetime) -> str:
    """Format datetime object to string format required by Twitter API."""
    return dt.strftime("%Y%m%d%H%M") if dt else None
