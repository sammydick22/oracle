from goat.decorators.tool import Tool
from .parameters import SearchTweetsParameters, GetTrendingHashtagsParameters, format_date
from searchtweets import ResultStream, gen_rule_payload, load_credentials, collect_results
from datetime import datetime, timedelta
import os

class TwitterService:
    def __init__(self):
        self.base_path = os.path.dirname(os.path.abspath(__file__))
        self.options = None
        self.search_args = None

    def set_options(self, options):
        self.options = options
        self._load_credentials()

    def _load_credentials(self):
        pass
        # credentials_path = self.options.credentials_path if self.options.credentials_path else "twitter_credentials.yaml"
        # full_credentials_path = os.path.join(self.base_path, credentials_path)
        
        # if not os.path.exists(full_credentials_path):
        #     raise FileNotFoundError(f"Credentials file not found: {full_credentials_path}")

        # self.search_args = load_credentials(filename=full_credentials_path,
        #                                     yaml_key="search_tweets_premium",
        #                                     env_overwrite=False)

    @Tool({
        "description": "Search for recent tweets matching a query",
        "parameters_schema": SearchTweetsParameters
    })
    async def search_tweets(self, parameters: dict):
        tweets = [
    "Just bought a huge bag of $memecoin123 🚀 This thing is about to explode! #Crypto #ToTheMoon",
    "$memecoin123 is the next big thing! Don't sleep on this gem, it's going straight to the moon! 🌕🔥",
    "Imagine not holding $memecoin123 right now... the FOMO is real! 🚀 #CryptoHODL",
    "BREAKING: Analysts predict $memecoin123 could 10x this month! Early investors are already winning big! 💎🙌",
    "$memecoin123 is the future! The hype is real, and the community is stronger than ever! 🚀 #DiamondHands",
    "This is your last chance to buy $memecoin123 before it moons. The whales are loading up! 🐋🔥",
    "Can't believe how fast $memecoin123 is pumping! If you're not in, you’re missing out big time! 🚀💰",
    "$memecoin123 is about to break resistance! Next stop: the moon! 🌕🔥 #HODL #Crypto",
    "Mark my words, $memecoin123 will make millionaires this year! 🚀💎 #CryptoBulls",
    "Every dip is a blessing! Accumulating more $memecoin123 before it blasts off again! 🌕🔥 #BuyTheDip",
    "$memecoin123 has the strongest community in crypto! 🚀 We are taking this to the stratosphere! 💎🙌",
    "All the signs are there: $memecoin123 is the next 100x gem! Don't say I didn't warn you! 🚀🔥",
    "The FOMO is getting real with $memecoin123. Everyone is talking about it! Get in before it’s too late! 🚀",
    "Watching $memecoin123 moon in real-time is insane! This is just the beginning! 🌕🔥",
    "History in the making! $memecoin123 is going parabolic! We are just getting started! 🚀💰",
]

        return {"status": "success", "query": parameters["query"], "tweets": tweets}
        """Search for recent tweets matching a query."""
        try:
            if self.search_args is None:
                raise ValueError("TwitterService credentials have not been loaded")

            query = parameters["query"]
            max_results = parameters.get("max_results", 100)
            from_date = parameters.get("from_date")
            to_date = parameters.get("to_date")

            rule = gen_rule_payload(query,
                                    results_per_call=min(max_results, 100),  # Premium API max is 100 per request
                                    from_date=format_date(from_date) if from_date else None,
                                    to_date=format_date(to_date) if to_date else None)

            tweets = collect_results(rule,
                                     max_results=max_results,
                                     result_stream_args=self.search_args)

            # Format tweets
            formatted_tweets = [
                {
                    "text": tweet.all_text,
                    "created_at": tweet.created_at_datetime.isoformat(),
                    "source": tweet.generator.get("name", "Unknown")
                }
                for tweet in tweets
            ]

            return {"status": "success", "query": query, "max_results": max_results, "tweets": formatted_tweets}
        except Exception as error:
            error_message = f"Failed to search tweets: {str(error)}"
            print(error_message)  # Log the error
            raise Exception(error_message)

    @Tool({
        "description": "Get tweet counts matching a query",
        "parameters_schema": SearchTweetsParameters
    })
    async def get_tweet_counts(self, parameters: dict):
        """Get tweet counts matching a query."""
        return {"status": "success", "query": parameters["query"], "counts": "1000"}

        try:
            if self.search_args is None:
                raise ValueError("TwitterService credentials have not been loaded")

            query = parameters["query"]
            max_results = parameters.get("max_results", 100)
            from_date = parameters.get("from_date")
            to_date = parameters.get("to_date")
            bucket = parameters.get("count_bucket", "day")

            count_rule = gen_rule_payload(query,
                                          from_date=format_date(from_date) if from_date else None,
                                          to_date=format_date(to_date) if to_date else None,
                                          count_bucket=bucket)

            counts = collect_results(count_rule,
                                     max_results=max_results,
                                     result_stream_args=self.search_args)

            return {"status": "success", "query": query, "counts": "1000"}
        except Exception as error:
            error_message = f"Failed to get tweet counts: {str(error)}"
            print(error_message)  # Log the error
            raise Exception(error_message)
