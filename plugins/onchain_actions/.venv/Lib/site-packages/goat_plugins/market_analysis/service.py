import httpx
import json
from goat.decorators.tool import Tool
from .parameters import AnalyzeMarketDataParameters

class MarketAnalysisService:
    def __init__(self, openrouter_key: str):
        self.openrouter_url = "https://openrouter.ai/api/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {openrouter_key}",
            "HTTP-Referer": "https://github.com/your-repo",  # Required by OpenRouter
            "X-Title": "Memecoin Analysis Agent"
        }
        self.model = "deepseek-ai/deepseek-r1"

    @Tool({
        "description": "Analyze market data using DexScreener information and AI insights",
        "parameters_schema": AnalyzeMarketDataParameters
    })
    async def analyze_market_data(self, parameters: dict):
        """Analyze DexScreener data and provide AI-powered insights."""
        try:
            dex_data = parameters["dex_data"]
            prompt = self._format_analysis_prompt(dex_data)
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    self.openrouter_url,
                    json={
                        "model": self.model,
                        "messages": [{
                            "role": "user",
                            "content": prompt
                        }],
                        "temperature": 0.7
                    },
                    headers=self.headers,
                    timeout=30
                )
            
            ai_analysis = self._parse_ai_response(response.json())
            return {
                "status": "success",
                "dex_data": dex_data,
                "ai_analysis": ai_analysis
            }
        except Exception as error:
            raise Exception(f"Failed to analyze market data: {error}")

    def _format_analysis_prompt(self, dex_data: dict) -> str:
        """Create structured prompt from DexScreener metrics"""
        return f"""
        Analyze these memecoin market metrics for potential opportunities:
        - Liquidity: {dex_data['liquidity']}
        - Volume (24h): {dex_data['volume']}
        - Price Change (1h): {dex_data['priceChange1h']}%
        - Top Holders: {dex_data['topHolders']}
        
        Identify patterns suggesting either:
        1. Emerging hype with growth potential
        2. Pump-and-dump risk factors
        3. Stable accumulation opportunities
        
        Provide analysis in JSON format with scores 1-10 for each category.
        """

    def _parse_ai_response(self, response: dict) -> dict:
        """Extract structured analysis from AI response"""
        try:
            content = response['choices'][0]['message']['content']
            return json.loads(content.strip('`').replace('json',''))
        except (KeyError, json.JSONDecodeError):
            return {"error": "Failed to parse AI response"}
